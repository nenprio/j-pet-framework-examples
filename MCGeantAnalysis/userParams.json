{
    "EventFinder_EventTime_float":5000.0,
    "GeantParser_MaxTimeWindow_double":0.0,
    "GeantParser_MinTimeWindow_double":-50000000.0,
    "GeantParser_SourceActivity_double":4.7,
    "GeantParser_EnergyThreshold_double":10.0,
    "GeantParser_MakeHistograms_bool":true,
    "GeantParser_MakeEfficiencies_bool":true,
    "GeantParser_ZPositionSmearingParameters_std::vector<double>":[3.0],
    "GeantParser_ZPositionSmearingFunctionLimits_std::vector<double>":[-20.0, 20.0],
    "GeantParser_ZPositionSmearingFunction_std::string":"[&](double *x, double *p){return TMath::Gaus(*x, p[1], p[4]);}",
    "GeantParser_EnergySmearingParameters_std::vector<double>":[],
    "GeantParser_EnergySmearingFunctionLimits_std::vector<double>":[-1500.0, 1500.0],
    "GeantParser_EnergySmearingFunction_std::string":"[&](double *x, double *p){double sigma = p[2] * 0.044 / sqrt(p[2] / 1000.);return TMath::Gaus(*x, p[2], sigma);}",
    "GeantParser_TimeSmearingParameters_std::vector<double>":[80.0, 200.0, 270.0],
    "GeantParser_TimeSmearingFunctionLimits_std::vector<double>":[-2000.0, 2000.0],
    "GeantParser_TimeSmearingFunction_std::string":"[&](double *x, double *p){double sigma = p[4];if(p[2] < p[5]){sigma = sigma / sqrt(p[2] / p[6]);} return TMath::Gaus(*x, p[3], sigma);}"
}
